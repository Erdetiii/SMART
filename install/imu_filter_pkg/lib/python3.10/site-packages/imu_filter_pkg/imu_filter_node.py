import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Imu
from scipy.signal import butter, filtfilt

class IMUFilterNode(Node):
    def __init__(self):
        super().__init__('imu_filter_node')
        self.subscription = self.create_subscription(Imu, '/imu/data', self.imu_callback, 10)
        self.publisher_ = self.create_publisher(Imu, '/filtered_imu', 10)

        # Low-pass filter parameters
        self.fs = 50.0  # Sampling frequency
        self.cutoff = 2.5  # Cutoff frequency

    def butter_lowpass(self, cutoff, fs, order=5):
        nyquist = 0.5 * fs
        normal_cutoff = cutoff / nyquist
        b, a = butter(order, normal_cutoff, btype='low', analog=False)
        return b, a

    def apply_lowpass(self, data, cutoff, fs, order=5):
        b, a = self.butter_lowpass(cutoff, fs, order)
        return filtfilt(b, a, data)

    def imu_callback(self, msg):
        # Apply filter to IMU data (e.g., linear acceleration)
        filtered_imu = Imu()
        filtered_imu = msg  # Start by copying the message
        
        # Filtering example for acceleration.x
        filtered_imu.linear_acceleration.x = self.apply_lowpass(
            [msg.linear_acceleration.x], self.cutoff, self.fs)[0]
        
        # Publish filtered IMU data
        self.publisher_.publish(filtered_imu)

def main(args=None):
    rclpy.init(args=args)
    node = IMUFilterNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
